import pandas as pd
from argparse import ArgumentParser
from typing import Callable
import numpy as np
from pathlib import Path
from csv import DictReader
import seaborn as sns
from matplotlib import pyplot as plt


KEY_TO_NAME = {
    "reward": "Reward",
    "throughput": "Throughput (Mb/s)",
    "latency": "Latency (ms)"
}
WEIGHTS = {
    "reward": 1,
    "throughput": 1,
    "latency": 500, # rtt (s) -> latency (ms)
}
AGENTS_TO_PLOT = {
    "random": "No Shared Loss",
    "random_auxiliary_100.00": "Shared Loss (Coef 100)",
    "random_auxiliary_10.00": "Shared Loss (Coef 10)",
    "random_auxiliary_1.00": "Shared Loss (Coef 1)",
}

COLUMNS = ["Agent", "Training Progress", "Feature", "Value"]
LATENCY_PLOT_COLUMNS = ["Agent", "Latency (ms)", "Throughput (Mb/s)"]


def make_quantile_func(quantile: float) -> Callable:
    """
    Make a wrapper function that computes the quantile upon given the values
    """
    def func(a):
        return np.quantile(a, q=quantile)
    return func

def process_log_dir(log_dir: Path) -> pd.DataFrame:
    """
    Read and process all the csv files in log_directory, saving them to the summary file.
    Args:
        log_dir: path of the logs
    Returns:
        A dataframe 
    """

    read_data = []
    for agent_log_dir in log_dir.iterdir():
        if not agent_log_dir.is_dir():
            continue
        *dirs, agent_name = str(agent_log_dir.absolute()).split("/")
        agent, idx = agent_name.split("__")
        if agent not in AGENTS_TO_PLOT:
            continue
        for train_progress_dir in agent_log_dir.iterdir():
            if not train_progress_dir.is_dir():
                continue
            try:
                train_progress = int(float(train_progress_dir.stem))
            except ValueError:
                continue
            for trace_file in train_progress_dir.iterdir():
                with open(trace_file, "r", newline="") as f:
                    reader = DictReader(f)
                    for row in reader:
                        for feature_key, feature_name in KEY_TO_NAME.items():
                            value = float(row[feature_key])
                            value *= WEIGHTS[feature_key]
                            read_data.append([AGENTS_TO_PLOT[agent], 
                                train_progress, feature_name, value])

    read_data = pd.DataFrame(read_data, columns=COLUMNS)
    return read_data


def main(log_dir: Path, save_dir: Path) -> None:
    data = process_log_dir(log_dir = log_dir)
    g = sns.relplot(data=data[data["Feature"] == "Reward"], 
        kind="line", x="Training Progress", y="Value", markers=True, dashes=False,
        hue="Agent", style="Agent",
        estimator="mean", errorbar=("se", 1.96), lw=2.5,
        facet_kws=dict(sharey=False))
    g.set(ylabel = "Mean Reward")
    g.savefig(save_dir / "train_mean_reward.png")
    fully_trained_data = data[data["Training Progress"] == 100]
    unique_agents = AGENTS_TO_PLOT.values()
    for func_name, percentile in [["Mean", None],
                                        ["90th Percentile", 0.90],
                                        ["95th Percentile", 0.95],
                                        ["99th Percentile", 0.99]]:
        latency_plot_data = []
        for agent in unique_agents:
            agent_data = fully_trained_data[fully_trained_data["Agent"] == agent]
            throughput_vals = agent_data[agent_data["Feature"] == "Throughput (Mb/s)"]["Value"]
            latency_vals = agent_data[agent_data["Feature"] == "Latency (ms)"]["Value"]
            throughput = throughput_vals.mean()
            if func_name == "Mean":
                latency = latency_vals.mean()
            else:
                latency = latency_vals.quantile(q=percentile)
            latency_plot_data.append([agent, latency, throughput])
        latency_plot_data = pd.DataFrame(latency_plot_data, columns= LATENCY_PLOT_COLUMNS)
        fig, ax = plt.subplots()
        g = sns.scatterplot(data = latency_plot_data, x="Latency (ms)", y="Throughput (Mb/s)",
            hue="Agent", style="Agent", ax=ax)
        ax.set_xlabel(f"{func_name} Latency (ms)")
        ax.invert_xaxis()
        fig_name = f"latency_{func_name.replace(' ', '_')}.png"
        fig.savefig(save_dir / fig_name)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("--log_dir", required=True, type=str, 
        help = "Path to logs generated by Training.")
    parser.add_argument("--save_dir", required=False, type=str, default=".",
        help = "Path to save the generated plots to.")
    args = parser.parse_args()
    main(log_dir = Path(args.log_dir), save_dir = Path(args.save_dir))